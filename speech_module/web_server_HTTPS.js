/*
  HTTPS Web Server for Speech Recognition Module
  ----------------------------------------------

  This instansiates a Web Server that serves up the HTML page for Speech
  Recognition.  The HTML page sends commands back to this server via sockets.io.
  These commands are then sent further to the Arduino Zumo Controller.

  Google Chrome repeatedly asks for permission to access the microphone, unless
  HTTPS is being used.  This slows down the speech recognition process, which
  slows down the reaction time of the robot.

  To resolve this issue, this file sets up a HTTPS server, using a self signed
  certicate I have created via OpenSSL.  Chrome doesn't like the self signed
  certificate, but you don't have to worry  about that for the sake of this
  example.

  Use "node web_server_HTTPS.js" to run this Web Server.

*/
var express = require('express');
var netSocket = require('net').Socket();

var app = express();
var httpapp = express();
var fs = require('fs');

// SSL Requirements (generated by OpenSSL)
var options = {
    key: fs.readFileSync('cert/key.pem'),
    cert: fs.readFileSync('cert/cert.pem'),
    requestCert: true
};

var http = require('http').createServer(httpapp);
var server = require('https').createServer(options, app);
var io = require('socket.io').listen(server);
var log = true;

// Redirects all traffic to HTTP to HTTPS Server
httpapp.get('*',function(req,res){
    res.redirect('https://127.0.0.1:8080'+req.url)
})

// Required to serve the static files (i.e. images)
app.use(express.static(__dirname));

// Serves up HTML page
app.get('/', function(req, res){
  res.sendFile(__dirname+'/arduino_speech.html');
});

// Handles socket.io communication
io.on('connection', function(socket){

  // Commands received from HTML page
  socket.on('command', function(msg){

    // Log command is desired
    if (Boolean(log)){
      console.log('"Received Command from HTML page [: ' + msg + ']');
    }

    // Sends command further to ardino module via TCP connection running on 9090
    netSocket.connect(9090);
    netSocket.write(msg);
    netSocket.end();

    // Will be used for sending Ack back to Web Page
    //io.emit('command', msg);
  });
});

//HTTPS Server
server.listen(8080, function(){
  if (Boolean(log)){
    console.log('HTTPS listening on *:8080');
  }
});
